import telebot
from telebot import types

BOT_TOKEN = "7712257279:AAFgJ6ku_s0OYWmAXyESMa59geG74No7MMU"

bot = telebot.TeleBot(BOT_TOKEN)

# --- –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• --- #
user_data = {}
user_results = {}

# --- –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –¢–ï–ö–°–¢–´ --- #
INFO = {
    "html": "<b>HTML (HyperText Markup Language)</b> ‚Äî —ç—Ç–æ —è–∑—ã–∫ —Ä–∞–∑–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã. –û–Ω —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –ª—é–±–æ–≥–æ —Å–∞–π—Ç–∞.",
    "css": "<b>CSS (Cascading Style Sheets)</b> ‚Äî —ç—Ç–æ —è–∑—ã–∫ —Å—Ç–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –Ω–∞ HTML. –° –ø–æ–º–æ—â—å—é CSS –∑–∞–¥–∞—é—Ç —Ü–≤–µ—Ç–∞, —à—Ä–∏—Ñ—Ç—ã, –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
    "javascript": "<b>JavaScript (JS)</b> ‚Äî —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏. –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–º–µ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
    "python": "<b>Python</b> ‚Äî —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º –ø—Ä–æ—Å—Ç—ã–º –∏ —á–∏—Å—Ç—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö, –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."
}

# --- –í–û–ü–†–û–°–´ –î–õ–Ø –¢–ï–°–¢–û–í --- #
QUESTIONS = {
    "html": [
        {
            "question": "–ö–∞–∫–æ–π —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–∞?",
            "options": ["<h6>", "<h1>", "<h2>", "<head>"],
            "answer": "<h1>"
        },
        {
            "question": "–ö–∞–∫–æ–π —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?",
            "options": ["<image>", "<pic>", "<img>", "<src>"],
            "answer": "<img>"
        },
        {
            "question": "–ö–∞–∫–æ–π —Ç–µ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏?",
            "options": ["<a>", "<link>", "<ref>", "<href>"],
            "answer": "<a>"
        }
    ],
    "css": [
        {
            "question": "–ö–∞–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∏–∑–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞?",
            "options": ["font-color", "text-color", "color", "background-color"],
            "answer": "color"
        },
        {
            "question": "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å id 'header'?",
            "options": [".header", "#header", "header", "*header"],
            "answer": "#header"
        },
        {
            "question": "–ö–∞–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∑–∞–¥–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø?",
            "options": ["padding", "border", "margin", "indent"],
            "answer": "margin"
        }
    ],
    "javascript": [
        {
            "question": "–ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ JavaScript?",
            "options": ["var", "let", "const", "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–µ—Ä–Ω—ã"],
            "answer": "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–µ—Ä–Ω—ã"
        },
        {
            "question": "–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è?",
            "options": ["==", "===", "=", "!="],
            "answer": "==="
        },
        {
            "question": "–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ —á—Ç–æ-–ª–∏–±–æ –≤ –∫–æ–Ω—Å–æ–ª—å?",
            "options": ["console.log()", "print()", "log()", "debug()"],
            "answer": "console.log()"
        }
    ],
    "python": [
        {
            "question": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Python?",
            "options": ["// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */", "# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", ""],
            "answer": "# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        },
        {
            "question": "–ö–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –æ–±—ä–µ–∫—Ç–∞?",
            "options": ["size()", "length()", "count()", "len()"],
            "answer": "len()"
        },
        {
            "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–æ–≤?",
            "options": ["array", "list", "tuple", "dictionary"],
            "answer": "list"
        }
    ]
}
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start --- #
@bot.message_handler(commands=["start"])
def send_welcome(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --- #
    user_data[user_id] = {}
    if user_id not in user_results:
        user_results[user_id] = []

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn_info = types.KeyboardButton("/info")
    btn_test = types.KeyboardButton("/test")
    btn_result = types.KeyboardButton("/result")
    btn_commands = types.KeyboardButton("/commands")
    markup.add(btn_info, btn_test)
    markup.add(btn_result, btn_commands)

    bot.send_message(message.chat.id,
                     f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n–Ø –±–æ—Ç '–¢–µ—Å—Ç –ó–Ω–∞–Ω–∏–π'. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
                     reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /commands --- #
@bot.message_handler(commands=["commands"])
def send_commands(message):
    commands_list = [
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞",
        "/info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ",
        "/test - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç",
        "/result - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "/commands - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    ]
    bot.send_message(message.chat.id, "üìå **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n" + "\n".join(commands_list), parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info --- #
@bot.message_handler(commands=["info"])
def request_info(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("HTML", callback_data="info_html")
    btn2 = types.InlineKeyboardButton("CSS", callback_data="info_css")
    btn3 = types.InlineKeyboardButton("JavaScript", callback_data="info_javascript")
    btn4 = types.InlineKeyboardButton("Python", callback_data="info_python")
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test --- #
@bot.message_handler(commands=["test"])
def request_test(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("HTML", callback_data="test_html")
    btn2 = types.InlineKeyboardButton("CSS", callback_data="test_css")
    btn3 = types.InlineKeyboardButton("JavaScript", callback_data="test_javascript")
    btn4 = types.InlineKeyboardButton("Python", callback_data="test_python")
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id, "üìù –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞:", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /result --- #
@bot.message_handler(commands=["result"])
def show_results(message):
    user_id = message.from_user.id
    if user_id not in user_results or not user_results[user_id]:
        bot.send_message(message.chat.id, "üìä –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    results_text = "üèÜ **–í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n"
    for i, result in enumerate(user_results[user_id], 1):
        results_text += f"{i}. –¢–µ–º–∞: *{result['topic'].upper()}* - {result['score']} –∏–∑ {result['total']}\n"
    
    bot.send_message(message.chat.id, results_text, parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ --- #
@bot.callback_query_handler(func=lambda call: call.data.startswith("info_"))
def callback_info(call):
    topic = call.data.split("_")[1]
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, INFO[topic], parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ --- #
@bot.callback_query_handler(func=lambda call: call.data.startswith("test_"))
def callback_test_start(call):
    user_id = call.from_user.id
    topic = call.data.split("_")[1]
    
    user_data[user_id] = {
        "topic": topic,
        "question_index": 0,
        "score": 0
    }
    
    bot.answer_callback_query(call.id)
    send_question(call.message.chat.id, user_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ --- #
@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def callback_answer(call):
    user_id = call.from_user.id
    data = call.data.split("_")
    
    topic = data[1]
    question_index = int(data[2])
    selected_option_index = int(data[3])
    
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å --- #
    if user_data.get(user_id) is None or user_data[user_id]["question_index"] != question_index:
        bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω.")
        return

    question = QUESTIONS[topic][question_index]
    selected_answer = question["options"][selected_option_index]
    
    if selected_answer == question["answer"]:
        user_data[user_id]["score"] += 1
        feedback = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        feedback = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}"
        
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=f"{call.message.text}\n\n–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer}\n{feedback}",
                          reply_markup=None)
    
    user_data[user_id]["question_index"] += 1
    
    # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç --- #
    if user_data[user_id]["question_index"] < len(QUESTIONS[topic]):
        send_question(call.message.chat.id, user_id)
    else:
        finish_test(call.message.chat.id, user_id)
# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ --- #
def send_question(chat_id, user_id):
    data = user_data[user_id]
    topic = data["topic"]
    question_index = data["question_index"]
    
    question_data = QUESTIONS[topic][question_index]
    question_text = f"**–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(QUESTIONS[topic])}:**\n\n{question_data['question']}"
    
    markup = types.InlineKeyboardMarkup()
    for i, option in enumerate(question_data["options"]):
        callback_data = f"answer_{topic}_{question_index}_{i}"
        markup.add(types.InlineKeyboardButton(option, callback_data=callback_data))
        
    bot.send_message(chat_id, question_text, reply_markup=markup, parse_mode="Markdown")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ --- #
def finish_test(chat_id, user_id):
    data = user_data[user_id]
    topic = data["topic"]
    score = data["score"]
    total_questions = len(QUESTIONS[topic])
    
    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç --- #
    user_results.setdefault(user_id, []).append({
        "topic": topic,
        "score": score,
        "total": total_questions
    })
    
    # --- –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ --- #
    del user_data[user_id]
    
    result_text = f"üéâ **–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!** üéâ\n\n–¢–µ–º–∞: *{topic.upper()}*\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: *{score}* –∏–∑ *{total_questions}*"
    result_text += "\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–π /test."
    
    bot.send_message(chat_id, result_text, parse_mode="Markdown")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê --- #
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)